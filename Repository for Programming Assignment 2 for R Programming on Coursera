Assignment: Caching the Inverse of a Matrix
Matrix inversion is usually a costly computation and there may be some benefit to caching the inverse of a matrix rather than compute it repeatedly (there are also alternatives to matrix inversion that we will not discuss here). Your assignment is to write a pair of functions that cache the inverse of a matrix.
makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.

Caching the Inverse of a Matrix:
To cash the solutions so you can easily look up later instead of computing again
set the the matrix, get the matrix, set the inverse, get the inverse

> makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
> > > 
> cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if (!is.null(inv)) {
return(inv)
}
+     mat <- x$get()
+     inv <- solve(mat, ...)
+     x$setInverse(inv)
+     inv
+ }
> 
> my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
> my_matrix$get()
     [,1] [,2]
[1,]    1    3
[2,]    2    4
